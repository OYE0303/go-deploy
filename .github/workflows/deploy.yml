name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: 'go-deploy'
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Output image
        run: |
          echo "Image: ${{ steps.build-image.outputs.image }}"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition go-deploy-task-definition --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        run: |
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-definition.json
          mv new-task-definition.json task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Output task definition ARN
        run: |
          echo "Task Definition ARN: ${{ steps.register-task-def.outputs.taskDefinitionArn }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.register-task-def.outputs.taskDefinitionArn }}
          service: 'go-deploy-service'
          cluster: 'go-deoloy-cluster'
          wait-for-service-stability: true
